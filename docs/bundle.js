!function(t){var e={};function r(a){if(e[a])return e[a].exports;var n=e[a]={i:a,l:!1,exports:{}};return t[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,a){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:a})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(a,n,function(e){return t[e]}.bind(null,n));return a},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e){var r,a,n,o,i,s,u,f,l,h=document.getElementById("song"),c=document.querySelector(".play-btn"),E=document.querySelector(".container");function p(){!function(){n.update(),l.updateSample();var t,e=f.material.uniforms.uRadius.value,r=l.frequencyByteData,a=[],o=.5*r.length;for(t=0;t<o;t++)a.push(r[t]);for(t=o-1;t>=0;t--)a.push(r[t]);for(t=0;t<o;t++)a.push(r[t]);for(t=o-1;t>=0;t--)a.push(r[t]);for(t=0;t<a.length;t++)if(t&&a.length-t>1){var c=a[t]/255;e[t]=Math.max(1,c*c*c*48)}else e[t]=128;var E=l.getAverageFloat(),p=8*E*E*E+1;f.material.uniforms.uRoundness.value.set(p,p);var d=2*l.getAverageFloat();i.intensity=d*d,s.intensity=d*d*d*d*.5,u.intensity=d*d*d*d*.5,f.material.uniforms.uTime.value=h.currentTime||0}(),a.render(o,r),requestAnimationFrame(p)}function d(){r.aspect=window.innerWidth/window.innerHeight,r.updateProjectionMatrix(),a.setSize(window.innerWidth,window.innerHeight)}function m(t,e){var r=window.AudioContext||window.webkitAudioContext;this.context=new r,this.analyzerNode=this.context.createAnalyser(),this.setBinCount(t),this.setSmoothingTimeConstant(e)}c.addEventListener("click",(function(){l.context.resume().then((function(){console.log("Playback resumed successfully")})),E.style.display="none",h.currentTime=0,h.play(),r.position.set(0,0,1200)})),h.addEventListener("ended",(function(){E.style.display="flex"})),window.onload=function(){h.crossOrigin="anonymous",h.src="https://raw.githubusercontent.com/zadvorsky/three.bas/master/examples/_audio/song.mp3",(l=new m(16,.8)).setSource(h),(a=new THREE.WebGLRenderer({antialias:!0})).setSize(window.innerWidth,window.innerHeight),a.setClearColor(1247515),document.getElementById("three-container").appendChild(a.domElement),(r=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,.1,5e3)).position.set(0,0,1200),o=new THREE.Scene,(i=new THREE.PointLight(16777215,1,1200,2)).position.set(0,0,0),o.add(i),(s=new THREE.DirectionalLight(16724255,.25)).position.set(0,1,1),o.add(s),(u=new THREE.DirectionalLight(31385,.25)).position.set(0,1,-1),o.add(u),(n=new THREE.OrbitControls(r,a.domElement)).autoRotate=!0,n.enableZoom=!0,n.enablePan=!1,n.constraint.minDistance=10,n.constraint.maxDistance=1200,n.constraint.minPolarAngle=.4*Math.PI,n.constraint.maxPolarAngle=.6*Math.PI,function(){var t,e,r,a,n,i=new THREE.PlaneGeometry(4,4),s=new THREE.BAS.PrefabBufferGeometry(i,25e4),u=s.createAttribute("aDelayDuration",2),l=s.createAttribute("aPivot",3),h=s.createAttribute("aAxisAngle",4),c=s.createAttribute("color",3);for(94+.0175*i.vertices.length,t=0,r=0;t<25e4;t++)for(a=15e-5*t,n=THREE.Math.randFloat(32,56.5),e=0;e<i.vertices.length;e++)u.array[r++]=a+.0175*e,u.array[r++]=n;var E=new THREE.Vector3;for(t=0,r=0;t<25e4;t++)for(E.x=THREE.Math.randFloat(0,2),E.y=THREE.Math.randFloat(0,2),E.z=THREE.Math.randFloat(0,2),e=0;e<i.vertices.length;e++)l.array[r++]=E.x,l.array[r++]=E.y,l.array[r++]=E.z;var p=new THREE.Vector3,d=0;for(t=0,r=0;t<25e4;t++)for(p.x=THREE.Math.randFloatSpread(2),p.y=THREE.Math.randFloatSpread(2),p.z=THREE.Math.randFloatSpread(2),p.normalize(),d=Math.PI*THREE.Math.randInt(48,64),e=0;e<i.vertices.length;e++)h.array[r++]=p.x,h.array[r++]=p.y,h.array[r++]=p.z,h.array[r++]=d;var m,v,y,T=new THREE.Color;for(t=0,r=0;t<25e4;t++)for(m=THREE.Math.randFloat(.5,1),v=THREE.Math.randFloat(.5,.75),y=THREE.Math.randFloat(.25,.5),T.setHSL(m,v,y),e=0;e<i.vertices.length;e++)c.array[r++]=T.r,c.array[r++]=T.g,c.array[r++]=T.b;var R,H,A,b=[],S=[];for(t=0;t<32;t++)t?t-32+1?(R=THREE.Math.randFloatSpread(600),H=25*t-400+THREE.Math.randFloatSpread(200),A=THREE.Math.randFloatSpread(600)):(R=0,H=1200,A=0):(R=0,H=-1400,A=0),b.push(R,H,A),S.push(0);var x=new THREE.BAS.PhongAnimationMaterial({vertexColors:THREE.VertexColors,shading:THREE.FlatShading,side:THREE.DoubleSide,defines:{PATH_LENGTH:b.length/3},uniforms:{uTime:{type:"f",value:0},uPath:{type:"fv",value:b},uRadius:{type:"fv1",value:S},uRoundness:{type:"v2",value:new THREE.Vector2(2,2)}},shaderFunctions:[THREE.BAS.ShaderChunk.quaternion_rotation,THREE.BAS.ShaderChunk["catmull-rom"],THREE.BAS.ShaderChunk.ease_in_out_cubic],shaderParameters:["uniform float uTime;","uniform vec3 uPath[PATH_LENGTH];","uniform float uRadius[PATH_LENGTH];","uniform vec2 uRoundness;","attribute vec2 aDelayDuration;","attribute vec3 aPivot;","attribute vec4 aAxisAngle;"],shaderVertexInit:["float tDelay = aDelayDuration.x;","float tDuration = aDelayDuration.y;","float tTime = clamp(uTime - tDelay, 0.0, tDuration);","float tProgress = tTime / tDuration;","float angle = aAxisAngle.w * tProgress;","vec4 tQuat = quatFromAxisAngle(aAxisAngle.xyz, angle);"],shaderTransformNormal:["objectNormal = rotateVector(tQuat, objectNormal);"],shaderTransformPosition:["float tMax = float(PATH_LENGTH - 1);","float tPoint = tMax * tProgress;","float tIndex = floor(tPoint);","float tWeight = tPoint - tIndex;","int i0 = int(max(0.0, tIndex - 1.0));","int i1 = int(tIndex);","int i2 = int(min(tIndex + 1.0, tMax));","int i3 = int(min(tIndex + 2.0, tMax));","vec3 p0 = uPath[i0];","vec3 p1 = uPath[i1];","vec3 p2 = uPath[i2];","vec3 p3 = uPath[i3];","float radius = catmullRom(uRadius[i0], uRadius[i1], uRadius[i2], uRadius[i3], tWeight);","transformed += aPivot * radius;","transformed = rotateVector(tQuat, transformed);","transformed += catmullRom(p0, p1, p2, p3, uRoundness, tWeight);"]},{shininess:16,specular:16766720,emissive:1247515});(f=new THREE.Mesh(s,x)).frustumCulled=!1,o.add(f)}(),requestAnimationFrame(p),window.addEventListener("resize",d,!1)},m.prototype={setSource:function(t){this.source=this.context.createMediaElementSource(t),this.source.connect(this.analyzerNode),this.analyzerNode.connect(this.context.destination)},setBinCount:function(t){this.binCount=t,this.analyzerNode.fftSize=2*t,this.frequencyByteData=new Uint8Array(t),this.timeByteData=new Uint8Array(t)},setSmoothingTimeConstant:function(t){this.analyzerNode.smoothingTimeConstant=t},getFrequencyData:function(){return this.frequencyByteData},getTimeData:function(){return this.timeByteData},getAverage:function(t,e){for(var r=0,a=t||0,n=a+(e||this.binCount),o=a;o<n;o++)r+=this.frequencyByteData[o];return r/(n-a)},getAverageFloat:function(t,e){return this.getAverage(t,e)/255},updateSample:function(){this.analyzerNode.getByteFrequencyData(this.frequencyByteData),this.analyzerNode.getByteTimeDomainData(this.timeByteData)}},THREE.BAS={},THREE.BAS.ShaderChunk={},THREE.BAS.ShaderChunk.animation_time="float tDelay = aAnimation.x;\nfloat tDuration = aAnimation.y;\nfloat tTime = clamp(uTime - tDelay, 0.0, tDuration);\nfloat tProgress = ease(tTime, 0.0, 1.0, tDuration);\n",THREE.BAS.ShaderChunk["catmull-rom"]="vec3 catmullRom(vec3 p0, vec3 p1, vec3 p2, vec3 p3, float t)\n{\n    vec3 v0 = (p2 - p0) * 0.5;\n    vec3 v1 = (p3 - p1) * 0.5;\n    float t2 = t * t;\n    float t3 = t * t * t;\n\n    return vec3((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\n}\n\nvec3 catmullRom(vec3 p0, vec3 p1, vec3 p2, vec3 p3, vec2 c, float t)\n{\n    vec3 v0 = (p2 - p0) * c.x;\n    vec3 v1 = (p3 - p1) * c.y;\n    float t2 = t * t;\n    float t3 = t * t * t;\n\n    return vec3((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\n}\n\nfloat catmullRom(float p0, float p1, float p2, float p3, float t)\n{\n    float v0 = (p2 - p0) * 0.5;\n    float v1 = (p3 - p1) * 0.5;\n    float t2 = t * t;\n    float t3 = t * t * t;\n\n    return float((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\n}\n\nfloat catmullRom(float p0, float p1, float p2, float p3, vec2 c, float t)\n{\n    float v0 = (p2 - p0) * c.x;\n    float v1 = (p3 - p1) * c.y;\n    float t2 = t * t;\n    float t3 = t * t * t;\n\n    return float((2.0 * p1 - 2.0 * p2 + v0 + v1) * t3 + (-3.0 * p1 + 3.0 * p2 - 2.0 * v0 - v1) * t2 + v0 * t + p1);\n}\n",THREE.BAS.ShaderChunk.cubic_bezier="vec3 cubicBezier(vec3 p0, vec3 c0, vec3 c1, vec3 p1, float t)\n{\n    vec3 tp;\n    float tn = 1.0 - t;\n\n    tp.xyz = tn * tn * tn * p0.xyz + 3.0 * tn * tn * t * c0.xyz + 3.0 * tn * t * t * c1.xyz + t * t * t * p1.xyz;\n\n    return tp;\n}\n",THREE.BAS.ShaderChunk.ease_in_cubic="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t*t + b;\n}\n",THREE.BAS.ShaderChunk.ease_in_out_cubic="float ease(float t, float b, float c, float d) {\n  if ((t/=d/2.0) < 1.0) return c/2.0*t*t*t + b;\n  return c/2.0*((t-=2.0)*t*t + 2.0) + b;\n}\n",THREE.BAS.ShaderChunk.ease_in_quad="float ease(float t, float b, float c, float d) {\n  return c*(t/=d)*t + b;\n}\n",THREE.BAS.ShaderChunk.ease_out_cubic="float ease(float t, float b, float c, float d) {\n  return c*((t=t/d - 1.0)*t*t + 1.0) + b;\n}\n",THREE.BAS.ShaderChunk.quaternion_rotation="vec3 rotateVector(vec4 q, vec3 v)\n{\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec4 quatFromAxisAngle(vec3 axis, float angle)\n{\n    float halfAngle = angle * 0.5;\n    return vec4(axis.xyz * sin(halfAngle), cos(halfAngle));\n}\n",THREE.BAS.PrefabBufferGeometry=function(t,e){THREE.BufferGeometry.call(this),this.prefabGeometry=t,this.prefabCount=e,this.prefabVertexCount=t.vertices.length,this.bufferDefaults()},THREE.BAS.PrefabBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.BAS.PrefabBufferGeometry.prototype.constructor=THREE.BAS.PrefabBufferGeometry,THREE.BAS.PrefabBufferGeometry.prototype.bufferDefaults=function(){for(var t=this.prefabGeometry.faces.length,e=3*this.prefabGeometry.faces.length,r=this.prefabVertexCount=this.prefabGeometry.vertices.length,a=[],n=0;n<t;n++){var o=this.prefabGeometry.faces[n];a.push(o.a,o.b,o.c)}var i=new Uint32Array(this.prefabCount*e),s=new Float32Array(this.prefabCount*r*3);this.setIndex(new THREE.BufferAttribute(i,1)),this.addAttribute("position",new THREE.BufferAttribute(s,3));for(var u=0,f=0;u<this.prefabCount;u++){for(var l=0;l<r;l++,f+=3){var h=this.prefabGeometry.vertices[l];s[f]=h.x,s[f+1]=h.y,s[f+2]=h.z}for(var c=0;c<e;c++)i[u*e+c]=a[c]+u*r}},THREE.BAS.PrefabBufferGeometry.prototype.bufferUvs=function(){for(var t=this.prefabGeometry.faces.length,e=this.prefabVertexCount=this.prefabGeometry.vertices.length,r=[],a=0;a<t;a++){var n=this.prefabGeometry.faces[a],o=this.prefabGeometry.faceVertexUvs[0][a];r[n.a]=o[0],r[n.b]=o[1],r[n.c]=o[2]}for(var i=this.createAttribute("uv",2),s=0,u=0;s<this.prefabCount;s++)for(var f=0;f<e;f++,u+=2){var l=r[f];i.array[u]=l.x,i.array[u+1]=l.y}},THREE.BAS.PrefabBufferGeometry.prototype.computeVertexNormals=function(){var t=this.index,e=this.attributes,r=e.position.array;void 0===e.normal&&this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(r.length),3));for(var a,n,o,i=e.normal.array,s=new THREE.Vector3,u=new THREE.Vector3,f=new THREE.Vector3,l=new THREE.Vector3,h=new THREE.Vector3,c=t.array,E=3*this.prefabGeometry.faces.length,p=0;p<E;p+=3)a=3*c[p+0],n=3*c[p+1],o=3*c[p+2],s.fromArray(r,a),u.fromArray(r,n),f.fromArray(r,o),l.subVectors(f,u),h.subVectors(s,u),l.cross(h),i[a]+=l.x,i[a+1]+=l.y,i[a+2]+=l.z,i[n]+=l.x,i[n+1]+=l.y,i[n+2]+=l.z,i[o]+=l.x,i[o+1]+=l.y,i[o+2]+=l.z;for(var d=1;d<this.prefabCount;d++)for(var m=0;m<E;m++)i[d*E+m]=i[m];this.normalizeNormals(),e.normal.needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.createAttribute=function(t,e){var r=new Float32Array(this.prefabCount*this.prefabVertexCount*e),a=new THREE.BufferAttribute(r,e);return this.addAttribute(t,a),a},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute4=function(t,e){var r,a,n=0,o=this.geometry.attributes[t].array;for(r=0;r<e.length;r++){var i=e[r];for(a=0;a<this.prefabVertexCount;a++)o[n++]=i.x,o[n++]=i.y,o[n++]=i.z,o[n++]=i.w}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute3=function(t,e){var r,a,n=0,o=this.geometry.attributes[t].array;for(r=0;r<e.length;r++){var i=e[r];for(a=0;a<this.prefabVertexCount;a++)o[n++]=i.x,o[n++]=i.y,o[n++]=i.z}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.PrefabBufferGeometry.prototype.setAttribute2=function(t,e){var r,a,n=0,o=this.geometry.attributes[t].array;for(r=0;r<this.prefabCount;r++){var i=e[r];for(a=0;a<this.prefabVertexCount;a++)o[n++]=i.x,o[n++]=i.y}this.geometry.attributes[t].needsUpdate=!0},THREE.BAS.BaseAnimationMaterial=function(t){THREE.ShaderMaterial.call(this),this.shaderFunctions=[],this.shaderParameters=[],this.shaderVertexInit=[],this.shaderTransformNormal=[],this.shaderTransformPosition=[],this.setValues(t)},THREE.BAS.BaseAnimationMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.BAS.BaseAnimationMaterial.prototype.constructor=THREE.BAS.BaseAnimationMaterial,THREE.BAS.BaseAnimationMaterial.prototype._concatVertexShader=function(){return""},THREE.BAS.BaseAnimationMaterial.prototype._concatFunctions=function(){return this.shaderFunctions.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatParameters=function(){return this.shaderParameters.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatVertexInit=function(){return this.shaderVertexInit.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatTransformNormal=function(){return this.shaderTransformNormal.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype._concatTransformPosition=function(){return this.shaderTransformPosition.join("\n")},THREE.BAS.BaseAnimationMaterial.prototype.setUniformValues=function(t){for(var e in t)if(e in this.uniforms){var r=this.uniforms[e],a=t[e];switch(r.type){case"c":r.value.set(a);break;case"v2":case"v3":case"v4":r.value.copy(a);break;case"f":case"t":default:r.value=a}}},THREE.BAS.PhongAnimationMaterial=function(t,e){THREE.BAS.BaseAnimationMaterial.call(this,t);var r=THREE.ShaderLib.phong;this.uniforms=THREE.UniformsUtils.merge([r.uniforms,this.uniforms]),this.lights=!0,this.vertexShader=this._concatVertexShader(),this.fragmentShader=r.fragmentShader,e.map&&(this.defines.USE_MAP=""),e.normalMap&&(this.defines.USE_NORMALMAP=""),this.setUniformValues(e)},THREE.BAS.PhongAnimationMaterial.prototype=Object.create(THREE.BAS.BaseAnimationMaterial.prototype),THREE.BAS.PhongAnimationMaterial.prototype.constructor=THREE.BAS.PhongAnimationMaterial,THREE.BAS.PhongAnimationMaterial.prototype._concatVertexShader=function(){return["#define PHONG","varying vec3 vViewPosition;","#ifndef FLAT_SHADED","\tvarying vec3 vNormal;","#endif",THREE.ShaderChunk.common,THREE.ShaderChunk.uv_pars_vertex,THREE.ShaderChunk.uv2_pars_vertex,THREE.ShaderChunk.displacementmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,THREE.ShaderChunk.logdepthbuf_pars_vertex,this._concatFunctions(),this._concatParameters(),"void main() {",this._concatVertexInit(),THREE.ShaderChunk.uv_vertex,THREE.ShaderChunk.uv2_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.beginnormal_vertex,this._concatTransformNormal(),THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#ifndef FLAT_SHADED","\tvNormal = normalize( transformedNormal );","#endif",THREE.ShaderChunk.begin_vertex,this._concatTransformPosition(),THREE.ShaderChunk.displacementmap_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.project_vertex,THREE.ShaderChunk.logdepthbuf_vertex,"\tvViewPosition = - mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n")}}]);